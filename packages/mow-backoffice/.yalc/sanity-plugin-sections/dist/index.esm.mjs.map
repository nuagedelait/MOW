{"version":3,"file":"index.esm.mjs","sources":["../src/schemas/documents/sectionssettings.ts","../src/schemas/documents/index.ts","../src/components/hooks/useVersionedClient.ts","../src/components/hooks/useSectionsSettings.ts","../src/components/Sections.tsx","../src/components/SectionsContent.tsx","../src/schemas/objects/sectionscontent.ts","../src/schemas/objects/index.ts","../src/schemas/index.ts","../src/desk/additionnals.ts","../src/index.ts"],"sourcesContent":["import SectionsContent from \"../components/SectionsContent\";\n\nexport default {\n    name: \"sectionssettings\",\n    title: \"Sections Settings\",\n    type: \"document\",\n    fields: [\n        {\n            name: 'title',\n            title: 'Title',\n            type: 'string',\n            initialValue: 'Sections settings',\n            hidden: true\n        },\n        {\n            name: \"enabletabs\",\n            title: \"Enable Tabs\",\n            type: \"boolean\"\n        },\n        {\n            name: \"sections\",\n            title: \"Sections\",\n            type: \"array\",\n            of: [\n                {\n                    name: \"Sections\",\n                    type: \"object\",\n                    fields: [\n                        {\n                            name: \"slug\",\n                            title: \"Slug\",\n                            type: \"slug\",\n                            options: {\n                                source: (doc: any, options: any) => {\n                                    const key = options.parent._key;\n                                    return doc.sections.find((section: any) => section._key === key).title\n                                },\n                                maxLength: 200\n                            }\n                        },\n                        {\n                            name: \"title\",\n                            title: \"Title\",\n                            type: \"string\",\n                        },\n                        {\n                            name: \"type\",\n                            title: \"Content type\",\n                            type: \"string\",\n                            options: {\n                                list: [\n                                    { title: 'Simple Text', value: 'text' },\n                                    { title: 'Rich Text', value: 'richText' }\n                                ], \n                                layout: 'radio'\n                            }\n                        },\n                    ],\n                }\n            ]\n        }\n    ]\n};","import sectionssettings from \"./sectionssettings\"\n\nexport default [\n    sectionssettings\n]","import { useMemo } from 'react';\nimport { useClient } from 'sanity';\n\nexport function useVersionedClient() {\n    const client = useClient({apiVersion: '2022-10-01'})\n    return useMemo(() => client.withConfig({apiVersion: '2022-10-01'}), [client])\n}\n\nexport default useVersionedClient\n","import { useEffect, useState } from \"react\";\nimport useVersionedClient from './useVersionedClient';\nimport groq from 'groq';\n\nexport interface SectionType {\n    title: string,\n    type: string,\n    slug: string,\n    initialValue: {\n        subtitle:string;\n        value: string | undefined\n    }\n}\n\ninterface SettingsType {\n    enabletabs: boolean,\n    sections: Array<SectionType>\n    title: string\n}\n\nexport default (): SettingsType | null => {\n\n    const client = useVersionedClient();\n\n    const [settings, setSettings] = useState<SettingsType | null>(null)\n\n    useEffect(() => {\n        if (client) {\n            client.fetch(groq`*[_type==\"sectionssettings\"]`).then((data: any) => {\n                if (data && data.length > 0) {\n                    const result: SettingsType = {\n                        enabletabs: data[0].enabletabs,\n                        sections: data[0].sections.map((section: any) => ({\n                            title: section.title,\n                            type: section.type,\n                            slug: section.slug.current,\n                            initialValue: {\n                                subtitle: '',\n                                value: section.type === 'text' ? \"\" : undefined\n                            }\n                        })),\n                        title: data[0].title\n                    }\n                    setSettings(result)\n                } else {\n                    setSettings(null);\n                }\n            })\n        }\n    }\n        , [client])\n\n    return settings;\n}","import {\n  useRef,\n  useState,\n  MutableRefObject,\n  useEffect,\n  useCallback,\n} from \"react\";\n\nimport {\n  BlockEditor as Editor,\n  PatchEvent,\n  FormPatch,\n  PortableTextBlock,\n} from \"sanity\";\n\nimport { Card, TabList, Tab, TabPanel, TextArea } from \"@sanity/ui\";\n\nimport { nanoid } from \"nanoid\";\n\nimport { SectionType } from \"./hooks/useSectionsSettings\";\nimport { ValueType } from \"./SectionsContent\";\n\nexport type InputValueType =\n  | string\n  | PatchEvent\n  | FormPatch\n  | FormPatch[]\n  | undefined;\n\nconst Sections = (props: any) => {\n  const { onChange, schemaType, onFocus, onBlur, initialValue, settings } =\n    props;\n\n  const sectionsSchema = schemaType.fields.find(\n    (field: any) => field.name === \"content\"\n  );\n\n  const editorSchema = sectionsSchema.type.of\n    .find((field: any) => field.name === \"SectionRichText\")\n    .fields.find((field: any) => field.name === \"content\");\n\n  const getEditorProps = useCallback((index: number) => ({\n      ...props,\n      elementProps: {\n        id: `PTE-${index}`,\n        ref: currentPTE,\n        onFocus,\n        onBlur,\n      },\n      members: [],\n      path: [],\n      focusPath: [],\n      onPathFocus: () => {},\n      id: `PTE-${index}`,\n      schemaType: editorSchema,\n      onItemAppend: () => {},\n      onItemPrepend: () => {},\n      onItemRemove: () => {},\n      onItemMove: () => {},\n      onInsert: () => {},\n      resolveInitialValue: async () => ({} as PortableTextBlock),\n      resolveUploader: () => null,\n      onUpload: () => {},\n      onItemCollapse: () => {},\n      onItemExpand: () => {},\n      onItemOpen: () => {},\n      onItemClose: () => {},\n      renderField: () => <></>,\n      renderInput: () => <></>,\n      renderItem: () => <></>,\n      renderPreview: () => <></>,\n      renderDefault: () => <></>,\n      level: 0,\n      validation: () => {},\n      changed: () => {},\n    }), []);\n\n  //Main State : Array of values\n  const [values, setValues] = useState(\n    Array.isArray(initialValue) ? initialValue : []\n  );\n\n  //TAB swtich handling\n  const [currentTab, setCurrentTab] = useState(0);\n\n  //Save action delayed for performance\n  const time: MutableRefObject<NodeJS.Timeout | null> =\n    useRef<NodeJS.Timeout | null>(null);\n\n  const changeIndex = useRef(0);\n\n  //On change update state with new value\n  const handleChange = (\n    target: ValueType,\n    newValue: InputValueType,\n    valueType: string,\n    valueIndex: number\n  ) => {\n    if (settings) {\n      const newValues: Array<ValueType> = [...values];\n\n      settings.sections.forEach((section: SectionType, index: number) => {\n        if (!newValues[index]) {\n          newValues[index] = {\n            type: section.type === \"text\" ? \"text\" : \"richText\",\n            subtitle: section.initialValue.subtitle,\n            value: section.initialValue.value,\n            _key: nanoid(),\n          };\n        }\n        if (!newValues[index]._key) {\n          newValues[index]._key = nanoid();\n        }\n      });\n\n      newValues[valueIndex] = {\n        type: valueType === \"text\" ? \"text\" : \"richText\",\n        subtitle: settings.sections[valueIndex].title,\n        value: newValue,\n        _key: (target && target._key) ? target._key : nanoid(),\n      };\n\n      setValues(newValues);\n\n      changeIndex.current++;\n    }\n  };\n\n  //Tab change handling, saving data on switch\n  const handleTabChange = (tab: number) => {\n    setCurrentTab(tab);\n    onChange(values);\n  };\n\n  //Delay saving while typing for performance\n  useEffect(() => {\n    if (time.current) {\n      clearTimeout(time.current);\n    }\n    if (changeIndex.current > 0) {\n      time.current = setTimeout(() => {\n        onChange(values);\n      }, 1000);\n    }\n\n    return () => {\n      if (time.current) {\n        clearTimeout(time.current);\n      }\n    };\n  }, [changeIndex.current]);\n\n  const currentPTE = useRef<any | null>(null);\n\n  return (\n    <>\n      <TabList space={2}>\n        {settings.sections.map((sectionConfig: SectionType, index: number) => {\n          return (\n            <Tab\n              key={index}\n              aria-controls={`${sectionConfig.slug}-panel`}\n              id={`${sectionConfig.slug}-tab`}\n              label={sectionConfig.title}\n              onClick={() => handleTabChange(index)}\n              selected={currentTab === index}\n            />\n          );\n        })}\n      </TabList>\n\n      {settings.sections.map((sectionConfig: SectionType, index: number) => {\n        return (\n          <TabPanel\n            key={index}\n            aria-labelledby={`${sectionConfig.slug}-tab`}\n            hidden={currentTab !== index}\n            id={`${sectionConfig.slug}-panel`}\n          >\n            <Card border marginTop={2} padding={4} radius={2}>\n              {sectionConfig.type === \"text\" && (\n                <TextArea\n                  onChange={(event) => {\n                    handleChange(\n                      values[index],\n                      event.currentTarget.value,\n                      sectionConfig.type,\n                      index\n                    );\n                  }}\n                  type={sectionsSchema.type.of[index]}\n                  value={values[index] ? values[index].value : \"\"}\n                  rows={10}\n                ></TextArea>\n              )}\n              {sectionConfig.type === \"richText\" && (\n                <Editor\n                  {...getEditorProps(index)}\n                  onChange={(patchData) => {\n                    handleChange(\n                      values[index],\n                      undefined,\n                      sectionConfig.type,\n                      index\n                    );\n                  }}\n                  value={values[index].value ? values[index].value : undefined}\n                />\n              )}\n            </Card>\n          </TabPanel>\n        );\n      })}\n      </>\n  );\n};\n\n// Create the default export to import into our schema\nexport default Sections;\n","import { set, unset, BlockEditor as Editor } from \"sanity\";\n\nimport {\n  Stack,\n  Flex,\n  Heading,\n  Card,\n  Badge,\n  Text,\n  Inline,\n  Spinner,\n} from \"@sanity/ui\";\n\nimport useSectionsSettings from \"./hooks/useSectionsSettings\";\nimport Sections, { InputValueType } from \"./Sections\";\n\nexport interface ValueType {\n  subtitle: string;\n  type: \"text\" | \"richText\";\n  value: InputValueType;\n  _key: string;\n}\n\nconst SectionsContent = (props: any) => {\n  const {\n    elementProps,\n    onChange,\n    schemaType,\n    value = \"\",\n    onFocus,\n    onBlur,\n  } = props;\n\n  const settings = useSectionsSettings();\n\n  console.log(\"receivedValues :\", value);\n\n  //On change update state with new value\n  const handleChange = (values: Array<ValueType>) => {\n    console.log(\"newValues :\", values);\n    onChange(\n      values.length > 0\n        ? set({\n            usetabs: settings ? settings.enabletabs : false,\n            content: values,\n          })\n        : unset()\n    );\n  };\n\n  if (!settings) {\n    return (\n      <Stack>\n        <Card padding={2}>\n          <Stack>\n            <Spinner muted />\n            <Text>Loading Settings</Text>\n          </Stack>\n        </Card>\n      </Stack>\n    );\n  }\n\n  if (settings && settings.sections.length === 0) {\n    return (\n      <Stack>\n        <Card>\n          <Flex>\n            <Card padding={2}>\n              <Badge tone=\"caution\">caution</Badge>\n            </Card>\n            <Card padding={2}>\n              <Heading as=\"h5\" size={1}>\n                Sections plugin\n              </Heading>\n            </Card>\n          </Flex>\n        </Card>\n        <Card padding={2}>\n          <Text>No section found, you should configure the module first</Text>\n        </Card>\n      </Stack>\n    );\n  }\n\n  return (\n    <>\n      <Stack>\n        <Card padding={2}>\n          <Flex align=\"center\">\n            <Text\n              size={2}\n              style={{ paddingRight: \"0.5em\" }}\n            >{`Tabs mode is `}</Text>\n            <Badge tone={settings.enabletabs ? \"positive\" : \"critical\"}>\n              {settings.enabletabs ? \"enable\" : \"disable\"}\n            </Badge>\n          </Flex>\n        </Card>\n        <Card padding={2}>\n          <Sections\n            settings={settings}\n            {...props}\n            onChange={handleChange}\n            initialValue={value.content}\n          ></Sections>\n        </Card>\n      </Stack>\n    </>\n  );\n};\n\n// Create the default export to import into our schema\nexport default SectionsContent;\n","import SectionsContent from \"../../components/SectionsContent\";\n\nexport default {\n  name: \"sectionscontent\",\n  title: \"Sections Content\",\n  type: 'object',\n  fields: [\n    {\n      name: 'usetabs',\n      title: 'Use tabs',\n      type: 'boolean',\n      hidden: true\n    },\n    {\n      name: 'content',\n      title: 'Content',\n      type: \"array\",\n      of: [\n        {\n          name: \"SectionString\",\n          type: \"object\",\n          fields: [\n            {\n              name: \"type\",\n              title: \"Type\",\n              type: \"string\",\n            },\n            {\n              name: \"subtitle\",\n              title: \"Subtitle\",\n              type: \"string\",\n            },\n            {\n              name: \"content\",\n              title: \"Content\",\n              type: \"string\",\n            },\n          ],\n        },\n        {\n          name: \"SectionRichText\",\n          type: \"object\",\n          fields: [\n            {\n              name: \"type\",\n              title: \"Type\",\n              type: \"string\",\n            },\n            {\n              name: \"subtitle\",\n              title: \"Subtitle\",\n              type: \"string\",\n            },\n            {\n              name: \"content\",\n              title: \"Content\",\n              type: 'array',\n              of: [\n                {\n                  type: 'block'\n                }\n              ]\n            }\n          ]\n        }\n      ],\n    }\n  ],\n  components: {\n    input: SectionsContent,\n  }\n};","import sectionscontent from \"./sectionscontent\"\n\nexport default [\n    sectionscontent\n]","import documents from './documents';\nimport objects from './objects';\n\nexport default [\n    ...documents,\n    ...objects\n]","\nconst baseLang = 'fr';\n\nexport default {\n    settings: (S: any) => {\n\n        return S.listItem()\n            .title('Sections')\n            .id('sections-settings')\n            .child(\n                S.document()\n                    .schemaType('sectionssettings')\n                    .documentId('sectionssettings')\n                    .title('Sections settings')\n            )\n    }\n}","import { definePlugin, isArraySchemaType } from 'sanity'\nimport schemas from './schemas';\nimport { additionnals } from './desk';\n\n/** @public */\nexport interface SectionsConfig {\n    targets: Array<string>\n}\n\n/** @public */\nexport const Sections = definePlugin<SectionsConfig | void>(\n    (config: SectionsConfig = {\n        targets: [\"post\"]\n    }) => {\n        // eslint-disable-next-line no-console\n        console.log('sanity-plugin-section loaded');\n        return {\n            name: 'sanity-plugin-sections',\n            schema: {\n                types: (prev: Array<any>, context) => {\n                    config.targets.forEach((targetType: string, index: number) => {\n                        const target = prev.findIndex(type => type.name === targetType);\n                        if (target > -1) {\n                            const fieldIndex = prev[target].fields.findIndex((field:any) => field.name === 'body');\n                            if(fieldIndex > -1){\n                                const { of, ...rest} = prev[target].fields[fieldIndex];\n                                prev[target].fields[fieldIndex] = {\n                                    ...rest,\n                                    type: 'sectionscontent'\n                                }\n                            }\n                        }\n                    });\n                    return [...schemas, ...prev]\n                }\n            },\n        }\n    })\n\n/** @public */\nexport const desk = {\n    additionnals\n}"],"names":["sectionssettings","name","title","type","fields","initialValue","hidden","of","options","source","doc","key","parent","_key","sections","find","section","maxLength","list","value","layout","documents","useVersionedClient","client","useClient","apiVersion","useMemo","withConfig","useSectionsSettings","settings","setSettings","useState","useEffect","fetch","groq","then","data","length","result","enabletabs","map","slug","current","subtitle","Sections","props","onChange","schemaType","onFocus","onBlur","sectionsSchema","field","editorSchema","getEditorProps","useCallback","index","elementProps","id","ref","currentPTE","members","path","focusPath","onPathFocus","onItemAppend","onItemPrepend","onItemRemove","onItemMove","onInsert","resolveInitialValue","resolveUploader","onUpload","onItemCollapse","onItemExpand","onItemOpen","onItemClose","renderField","jsx","Fragment","renderInput","renderItem","renderPreview","renderDefault","level","validation","changed","values","setValues","Array","isArray","currentTab","setCurrentTab","time","useRef","changeIndex","handleChange","target","newValue","valueType","valueIndex","newValues","forEach","nanoid","handleTabChange","tab","clearTimeout","setTimeout","jsxs","children","TabList","space","sectionConfig","Tab","label","onClick","selected","TabPanel","Card","border","marginTop","padding","radius","TextArea","event","currentTarget","rows","Editor","patchData","SectionsContent","console","log","set","usetabs","content","unset","Stack","Spinner","muted","Text","Flex","Badge","tone","Heading","as","size","align","style","paddingRight","sectionscontent","components","input","objects","schemas","additionnals","S","listItem","child","document","documentId","definePlugin","config","targets","schema","types","prev","context","targetType","findIndex","fieldIndex","rest","desk"],"mappings":"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"}